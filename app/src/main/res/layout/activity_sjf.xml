<?xml version="1.0" encoding="utf-8"?>
<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:openDrawer="start">

    <include
        layout="@layout/app_bar_sjf"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <android.support.design.widget.NavigationView
        android:id="@+id/nav_view"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        android:fitsSystemWindows="true"
        app:headerLayout="@layout/nav_header_sjf"
        app:menu="@menu/activity_sjf_drawer" />
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
    <TextView
        android:layout_width="wrap_content"
        android:textAlignment="gravity"
        android:layout_marginTop="60dp"
        android:layout_height="wrap_content"
        android:text="Non-preemptive - once CPU given to the process it cannot be preempted until completes its CPU burst
Ready queue is treated as a priority queue based on smallest CPU time requirement
Priorities are assigned in inverse order of time needed for completion of the entire job
If equal time of completion, then FCFS is used for assigning priority.
Arriving jobs inserted at proper position in queue
Dispatcher selects shortest job (1st in queue) and runs to completion
Gives minimum average waiting time for a given set of processes.
Minimizes average turnaround time.
When multiple batch jobs are sitting in a queue with the same priority, the scheduler runs the shortest job first.
It cannot be implemented at the level of short term CPU scheduling.
A job exceeding the resource estimation is aborted.
Store estimated value in PCB for the current burst, and compare with actual value.
Exponential averaging is used to estimate the process’ burst duration.
Advantages:
 Minimizes average waiting time.
Provably optimal w.r.t. average turnaround time
Throughput is high.
Disadvantages:
 In general, cannot be implemented.
Requires future knowledge
In practice, can’t actually predict the length of next burst
Can lead to unfairness or starvation
It may penalize processes with high service time requests. If the ready list is saturated, then processes with large service times tend to be left in the ready list while small processes receive service. In extreme case, where the system has little idle time, processes with large service times will never be served. This total starvation of large processes may be a serious liability of this algorithm.
Doesn’t always minimize average turnaround time
Elapsed time (i.e., execution-completed-time) must be recorded, it results an additional overhead on the processor. "/>
        <Button
            android:id="@+id/sjf_ex"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:text="Example SJF"/>
            <Button
                android:id="@+id/srtf_ex"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="center"
                android:text="Example SRTF"/>

        </LinearLayout>
    </ScrollView>

</android.support.v4.widget.DrawerLayout>
